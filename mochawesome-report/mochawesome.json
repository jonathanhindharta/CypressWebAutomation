{
  "stats": {
    "suites": 1,
    "tests": 2,
    "passes": 2,
    "pending": 0,
    "failures": 0,
    "start": "2024-04-26T06:17:53.763Z",
    "end": "2024-04-26T06:17:55.043Z",
    "duration": 1280,
    "testsRegistered": 2,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "749db232-522d-446c-9b69-9a4520a89cb7",
      "title": "",
      "fullFile": "cypress\\integration\\APIEndPointAutomation.js",
      "file": "cypress\\integration\\APIEndPointAutomation.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae659a99-7a5d-40c5-b2c7-7ee342d0706d",
          "title": "API End Point Test Suite",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Assert API Upcoming Events",
              "fullTitle": "API End Point Test Suite Assert API Upcoming Events",
              "timedOut": null,
              "duration": 523,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', Cypress.env('url_api_upcoming_events'), {}).then(function (response) {\n  expect(response.status).to.eq(200); //assert has 3 objects\n  expect(response.body).to.have.length(3); //assert if the first object \"position\" value is 0 (in assignment assert if value is 1, but in response value is 0)\n  expect(response.body[0].position).equal(0); //assert if the second object \"position\" value is 1 (in assignment assert if value is 0, but in response value is 1)\n  expect(response.body[1].position).equal(1); //assert if the third object \"position\" value is 2\n  expect(response.body[2].position).equal(2);\n  response.body.forEach(res => {\n    //assert if all the objects \"title\" are not empty\n    expect(res.title).to.not.be.empty; //assert if all the objects \"home_url\" are not empty and the string value starts with= \"https://\"\n    expect(res.home_url).to.not.be.empty;\n    expect(res.home_url).to.be.satisfy(msg => msg.startsWith('https://')); //assert if all the objects \"article_url\" are not empty and the string value starts with= \"https://\"\n    expect(res.article_url).to.not.be.empty;\n    expect(res.article_url).to.be.satisfy(msg => msg.startsWith('https://'));\n  });\n});",
              "err": {},
              "uuid": "9f098822-ace1-457c-b736-b841c4181fcf",
              "parentUUID": "ae659a99-7a5d-40c5-b2c7-7ee342d0706d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Assert API Post With Per Page 30",
              "fullTitle": "API End Point Test Suite Assert API Post With Per Page 30",
              "timedOut": null,
              "duration": 736,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('GET', Cypress.env('url_api_post_30'), {}).then(function (response) {\n  //assertThe response matches the following values: \"total\": 1, \"per_page\": 30, \"current_page\": 1, \"total_pages\": 1.\n  //some property value is matches based on response.body like total, per_page (because api param is 10), and total_pages\n  expect(response.body).to.have.property(\"total\", 52715);\n  expect(response.body).to.have.property(\"per_page\", 30);\n  expect(response.body).to.have.property(\"current_page\", 1);\n  expect(response.body).to.have.property(\"total_pages\", 1758); //assert It contains a \"posts\" object with at least 10 post items.\n  expect(response.body.posts).to.have.length.least(10); //loop to check each field in posts\n  response.body.posts.forEach(res => {\n    //assert field \"author\" are not empty in each posts\n    expect(res.author).to.not.be.empty; //assert field \"slug\" are not empty in each posts\n    expect(res.slug).to.not.be.empty; //assert field \"content\" are not empty in each posts\n    expect(res.content).to.not.be.empty; //assert field \"title\" are not empty in each posts\n    expect(res.title).to.not.be.empty; //assert field \"status\" are not empty in each posts\n    expect(res.status).to.not.be.empty; //assert field \"type\" are not empty in each posts\n    expect(res.type).to.not.be.empty;\n  });\n});",
              "err": {},
              "uuid": "254184bf-cae6-468f-8e83-71e2d8d4605b",
              "parentUUID": "ae659a99-7a5d-40c5-b2c7-7ee342d0706d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f098822-ace1-457c-b736-b841c4181fcf",
            "254184bf-cae6-468f-8e83-71e2d8d4605b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1259,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false
      },
      "version": "4.1.0"
    },
    "marge": {
      "options": null,
      "version": "4.1.0"
    }
  }
}